codesnippets {

  Snippets [Code+] = ‛«Code»’
  Code [s] = ‛«s»’

//// mid

      codeString [lq c cs* rq] =
   ‛\n«_.name_of (cs)» :: proc (name: string, owner : ^zd.Eh) -> ^zd.Eh {
	handler :: proc (eh: ^zd.Eh, msg: ^zd.Message) {
	«_.code_of (cs)»
	}
	return zd.make_leaf ("«cs»", owner, nil, handler)
    }’
      
      predicateString [lq c cs* rq] =
   ‛\n«_.name_of (cs)» :: proc (name: string, owner : ^zd.Eh) -> ^zd.Eh {
	handler :: proc (eh: ^zd.Eh, msg: ^zd.Message) {
	  if («_.code_of (cs)») {
            zd.send (eh=eh, port="yes", datum=zd.new_datum_bang (), causingMessage=msg)
          } else {
            zd.send (eh=eh, port="no", datum=zd.new_datum_bang (), causingMessage=msg)
          }
	}
	return zd.make_leaf ("«cs»", owner, nil, handler)
    }’
      
      string [lq cs* rq] = ‛’

      cCode [c] = ‛«c»’ 
      cPredicate [c] = ‛«c»’

      codeChar_next [c] = ‛ zd.send (eh=eh, port="", datum=zd.new_datum_bang (), causingMessage=msg) ’
      codeChar_other [c] = ‛«c»’

//// low level

      cLTSL [cLT cSL] = ‛«cLT»«cSL»’
      string [lq cs* rq] = ‛«lq»«cs»«rq»’

      cNext [c] = ‛???’
      cOpen [c] = ‛«c»’ 
      cClose [c] = ‛«c»’ 
      cLT [c] = ‛«c»’ 
      cGT [c] = ‛«c»’ 
      cSL [c] = ‛«c»’ 
      cSP  [c] = ‛«c»’ 
      cTAB [c] = ‛«c»’ 
      cNL [c] = ‛«c»’ 
      lq [c] = ‛«c»’ 
      rq [c] = ‛«c»’ 

      MacroCharacter [c] = ‛«c»’ 
      ContainerCharacter [c] = ‛«c»’ 
      WS [c] = ‛«c»’
      Delimiter [c] = ‛«c»’ 

}
