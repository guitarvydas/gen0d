codesnippets {
  Snippets [Code+] = ‛«Code»’

  CodeSpec_nonamecode [_tag Name] = ‛’

  CodeSpec_namedcode [_tag Name Code] = 
   ‛\n«_.legalizeName (Name)» :: proc (name: string, owner : ^zd.Eh) -> ^zd.Eh {
	handler :: proc (eh: ^zd.Eh, msg: ^zd.Message) {«Code»
	}
	return zd.make_leaf ("«Name»", owner, nil, handler)
    }’

  CodeSpec_namedpredicate [_tag Name Code] =
   ‛\n«_.legalizeName (Name)» :: proc (name: string, owner : ^zd.Eh) -> ^zd.Eh {
	handler :: proc (eh: ^zd.Eh, msg: ^zd.Message) {
	  if («Code») {
            zd.send (eh=eh, port="yes", datum=zd.new_datum_bang (), causingMessage=msg)
          } else {
            zd.send (eh=eh, port="no", datum=zd.new_datum_bang (), causingMessage=msg)
          }
	}
	return zd.make_leaf ("«Name»", owner, nil, handler)
    }’


  Name [bracketed_rune] = ‛«bracketed_rune»’
  Code [bracketed_rune] = ‛«bracketed_rune»’
  
  bracketed_rune [_lb rune+ _rb] = ‛«_lb»«rune»«_rb»’

  rune_wrapped [eLT attr+ eGT stuff+ eLTSL id eGT2] = ‛«id»’
  rune_raw [r] = ‛«r»’

  rawrune_next [c] = ‛«c»’
  rawrune_any [c] = ‛«c»’

  id [cs+] = ‛«cs»’
  attr [c] = ‛«c»’
  notGT [c] = ‛«c»’
  stuff [c] = ‛«c»’
  next [c] = ‛ zd.send (eh=eh, port="", datum=zd.new_datum_bang (), causingMessage=msg) ’
  open [c] = ‛«c»’
  close [c] = ‛«c»’
  lq [c] = ‛«c»’
  rq [c] = ‛«c»’
  rq [c] = ‛«c»’
  eLT [c] = ‛«c»’
  eGT [c] = ‛«c»’
  eSL [c] = ‛«c»’
  eLTSL [lt sl] = ‛«lt»«sl»’
}
